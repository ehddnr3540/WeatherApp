{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","temp","setTemp","city","setCity","feels","setFeels","min","setMin","max","setMax","className","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","main","feels_like","temp_min","temp_max","name","console","log","catch","alert","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7f748bc.chunk.js","sourcesContent":["import { useState } from 'react'\n\nconst api = {\n  key: \"5ce478d2872bf881543bcbd8a66cbe3f\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState('');\n  const [temp, setTemp] = useState('');\n  const [city, setCity] = useState('');\n  const [feels, setFeels] = useState('');\n  const [min, setMin] = useState('');\n  const [max, setMax] = useState('');\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(res => {\n          setQuery('')\n          setTemp(res.main.temp)\n          setFeels(res.main.feels_like)\n          setMin(res.main.temp_min)\n          setMax(res.main.temp_max)\n          setCity(res.name)\n          setWeather(res.weather[0].main)\n          console.log(res)\n        })\n        .catch((res) => {\n          alert(`There is no ${query} City`)\n        })\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day}, ${date} ${month}, ${year}`\n  }\n\n  return (\n    <div className={(weather !== \"\") ?\n      ((weather === 'Clouds') ? 'app cloud' :\n        (weather === 'Rain') ? 'app rain' :\n          (weather === 'Snow') ? 'app snow' :\n            (weather === 'Clear') ? 'app clear' :\n              (weather === 'Mist') ? 'app mist' : 'app') : 'app'}>\n      <div className=\"app-wrap\">\n        <header>\n          <input className=\"input\" type=\"text\" placeholder=\"Search The City\" onChange={e => setQuery(e.target.value)} value={query} onKeyPress={search}></input>\n          {/* <div className=\"date\">{new Date().getHours()} <span>:</span> {new Date().getMinutes()}</div> */}\n        </header>\n        {\n          (weather !== \"\") ? (\n            <div className=\"container\">\n              <div className=\"content\">\n                <h4>{city}</h4>\n                <h6>{dateBuilder(new Date())}</h6>\n                <h1>{Math.round(temp)}<span>ยบ</span></h1>\n                <div className=\"icon\">\n                  {(weather === 'Clouds' ? <i className=\"fas fa-cloud\"></i> : '')}\n                  {(weather === 'Rain' ? <i className=\"fas fa-cloud-showers-heavy\"></i> : '')}\n                  {(weather === 'Snow' ? <i className=\"far fa-snowflake\"></i> : '')}\n                  {(weather === 'Clear' ? <i className=\"fas fa-sun\"></i> : '')}\n                  {(weather === 'Mist' ? <i className=\"fas fa-tint\"></i> : '')}\n                </div>\n                <h2>{weather}</h2>\n              </div>\n              <div className=\"sub-content\">\n                <div className=\"fade01\">\n                  <p className=\"title\">Discomfort</p>\n                  <p>{feels}</p>\n                </div>\n                <div className=\"fade02\">\n                  <p className=\"title\">Min</p>\n                  <p>{min}ยบ</p>\n                </div>\n                <div className=\"fade03\">\n                  <p className=\"title\">Max</p>\n                  <p>{max}ยบ</p>\n                </div>\n              </div>\n            </div>\n          ) : ('')\n        }\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './weather.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}